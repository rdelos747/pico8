pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
--constants
t=true
f=false
xmn=0
xmx=896//0
ymn=0
ymx=128//0
p_spd=1
bk_col=7
lzr_col=12
e_spawn_t=1
e_spawn_t_max=100
max_enemies=10
hud_col=0
hud_h=8
hp_block=10

--game
--0:start,1:game
mode=0

--start menu
sm={
point=1,
press=f,
boxes={},
tim=0
}

--upgrades
upgrades={0,0,0,0,2,0,0,0,0}
--class
class=1
--shake
will_shake=f
--xp
xp_lvl={10,20,30,40,50}
cur_lvl=1
up_num=0

--cam
cam={
x=0,
y=0,
xdir=0,
ydir=0,
shake=0,
samt=1,
tm=0,
will_move=f
}

--player
pp={
x=100,
y=100,
rot={f,f},
mov={0,0},
drr={0,-1},
sp=1,
lzr=0,
dam=0,
max_hp=5,
hp=0,
xp=20
}

--arrays
lzrs={}
bldngs={}
xplsns={}
sky_lns={}
enemies={}

-- helpers
function rand(bot,top)
	return flr(rnd((top+1)-bot))+bot
end

function chance(n)
	return rand(0,100) < n
end

function _init()	
	--get menu boxes
	
	local r1=10
	local r2=50
	local r3=65
	local r4=80
	
	--row 1
	add(sm.boxes,{
		s="solider",x=3,y=3
	})
	add(sm.boxes,{
		s="heavy",x=7,y=3
	})
	add(sm.boxes,{
		s="scout",x=7,y=3
	})
	-- row 2
	add(sm.boxes,{
		s="upgrade\n1",x=3,y=3
	})
	add(sm.boxes,{
		s="upgrade\n2",x=3,y=3
	})
	add(sm.boxes,{
		s="upgrade\n3",x=3,y=3
	})
	-- row 3
	add(sm.boxes,{
		s="upgrade\n4",x=3,y=3
	})
	add(sm.boxes,{
		s="upgrade\n5",x=3,y=3
	})
	add(sm.boxes,{
		s="upgrade\n6",x=3,y=3
	})
	-- row 4
	add(sm.boxes,{
		s="upgrade\n7",x=3,y=3
	})
	add(sm.boxes,{
		s="upgrade\n8",x=3,y=3
	})
	add(sm.boxes,{
		s="upgrade\n9",x=3,y=3
	})
	-- row 5
	add(sm.boxes,{
		s="on",x=13,y=3
	})
	add(sm.boxes,{
		s="off",x=11,y=3
	})
	add(sm.boxes,{
		s="start",x=7,y=3
	})
	restart()
end

function restart()
	-- clear everything from tables
	-- can i just set array={}?
	-- i dont trust it :(
	for e in all(enemies) do
		del(enemies,e)
	end
	for e in all(xplsns) do
		del(xplsns,e)
	end
	for b in all(bldngs) do
		del(bldngs,b)
	end
	for l in all(lzrs) do
		del(lzrs,l)
	end
	for s in all(sky_lns) do
		del(sky_lns,s)
	end
	camera(0,0)
	mode=0
	--update upgrades
	while pp.xp>=xp_lvl[cur_lvl] do
		cur_lvl+=1
		up_num+=1
	end
end

--draw
function _draw()
	cls()
	if(mode==0)start_draw()
	if(mode==1)game_draw()
end

function start_draw()
	//draw_grid()
	-- rows
	local r1=1
	local r2=10
	print("choose class",41,1,7)
	print("xp:"..pp.xp,8,24,5)
	print("next upgrade in "
			..xp_lvl[cur_lvl]-pp.xp.."xp"
			,38,24,5)
	if up_num==1 then
		print(""..up_num..
		" upgrade available",25,32,7)
	elseif up_num>1 then
		print(""..up_num..
		" upgrades available",25,32,7)
	else
		print("no upgrades available",23,32,7)
	end
	print("screen shake",20,104,7)
	local cols={8,48,88}
	local rows={10,40,60,80,112}
	local h_sm=10
	local h_lg=16
	local idx=1
	--draw boxes
	for r in all(rows) do
	for c in all(cols) do
		local h=h_sm
		local b_col=5
		local txt=sm.boxes[idx]
		if idx<4 then
			--classes
			b_col=7
			if(class==idx)b_col=12
		elseif idx==13 then
			--shake t
			if(will_shake==t)b_col=12
		elseif idx==14 then
			--shake f
			if(will_shake==f)b_col=12
		elseif idx==15 then
			--start
			h=h_sm
			b_col=9
		else
			--upgrades
			h=h_lg
			if(upgrades[idx-3]==1)b_col=7
			if(upgrades[idx-3]==2)b_col=12
			if idx>3 and idx<10 then
				if upgrades[idx-3]==1 then
					line(c+16,r+h,c+16,r+h+3,7)
				elseif upgrades[idx-3]==2 then
					line(c+16,r+h,c+16,r+h+3,12)
				else
					line(c+16,r+h,c+16,r+h+3,5)
				end
			end
		end
		local t_col=b_col
		if idx==sm.point and
				sm.tim>10 then
			b_col=10
		end
		rect(c,r,c+32,r+h,b_col)
		print(txt.s,c+txt.x,r+txt.y,t_col)
		idx+=1
	end end
end

--debug
function draw_grid()
	for i=1,16 do
		line(i*8,0,i*8,127,1)
		line(0,i*8,127,i*8,1)
	end
	for i=1,8 do
		line(i*16,0,i*16,127,2)
		line(0,i*16,127,i*16,2)
	end
end

function game_draw()
	--bk/cam
	rectfill(cam.x-2,cam.y-2,
		cam.x+130,cam.y+130,bk_col)
	camera(cam.x,cam.y)
	--map
	m_x=flr(cam.x/8)-1
	m_y=flr(cam.y/8)-1
	map(m_x,m_y,m_x*8,m_y*8,18,17)
	--lazers
	for l in all(lzrs) do
		line(l.x1,l.y1,l.x2,l.y2,lzr_col)
		line(l.x1-1,
			l.y1-1,
			l.x2-1,
			l.y2-1)
	end
	--player
	if flr(pp.dam)%2 ==0 then
		spr(pp.sp,pp.x-4,pp.y-4,
			1,1,pp.rot[1],pp.rot[2])
	end
	--enemies
	for e in all(enemies) do
		if e.spawn_t>0 then
			circ(e.x,e.y,
				flr(e.spawn_t)%8,9)
			circ(e.x,e.y,
				(flr(e.spawn_t)%8)+1,8)
		else
			spr(e.sp,e.x-4,e.y-4,
				1,1,e.rot[1],e.rot[2])
		end
	end
	--explosions
	for e in all(xplsns) do
		if e.d==0 then
			circfill(e.x,e.y,e.r,e.c)
		end
	end
	--sky lines
	for s in all(sky_lns) do
		local y=s.y-4
		while y > cam.y-8 do
			spr(flr(s.sp),s.x-8,y)
			spr(flr(s.sp),s.x,y,1,1,-1)
			y-=8
		end
	end
	--hud
	draw_hud()
end

function draw_hud()
	local hud_t=cam.y+(127-hud_h)
	rectfill(cam.x,hud_t,
		cam.x+127,hud_t+8,0)	
	print("hp:",cam.x+2,hud_t+2,7)
	//print(pp.hp*hp_block,cam.x+100,hud_t+2,7)
	--hp background
	rectfill(cam.x+15,hud_t+2,
		cam.x+15+(pp.max_hp*hp_block),
		hud_t+6,1)
	--hp foreground
	rectfill(cam.x+15,hud_t+2,
		cam.x+15+(pp.hp*hp_block),
		hud_t+6,8)
	--damage block
	if flr(pp.dam)%2 != 0 then
		rectfill(
			cam.x+15+((pp.hp)*hp_block),
			hud_t+2,
			cam.x+15+((pp.hp+1)*hp_block),
			hud_t+6,10)
	end
	--xp
	local xps="xp:"..pp.xp
	print(xps,cam.x+75,hud_t+2,7)
	print("/"..xp_lvl[cur_lvl],
		cam.x+75+(#xps)*4,hud_t+2,5)
end

function _update()
	if(mode==0)start_update()
	if(mode==1)game_update()
	shake()
end

function start_update()
	if not sm.press then
		if btn(3) and sm.point<13 then
			sm.point+=3
			sm.press=t
		elseif btn(2) and sm.point>3 then
			sm.point-=3
			sm.press=t
		elseif btn(0) and sm.point%3 != 1 then
			sm.point-=1
			sm.press=t
		elseif btn(1) and sm.point%3 != 0 then
			sm.point+=1
			sm.press=t
		end
		if(sm.press)sm.tim=20
	elseif not btn(2) and 
								not btn(3) and
								not btn(0) and
								not btn(1) then
		sm.press=f	
	end
	if btn(4) or btn(5) then
		sm.tim=20
		--start
		if sm.point==15 then
			mode=1
			game_init()
		--select class
		elseif sm.point<4 then
			class=sm.point
		--select shake
		elseif sm.point==13 then
			will_shake=t
		elseif sm.point==14 then
			will_shake=f
		--upgrades
		elseif upgrades[sm.point-3]==1 then
			upgrades[sm.point-3]=2
			up_num-=1
		end
	end
	if sm.tim>0 then
		sm.tim-=1
	else
		sm.tim=20
	end
	
	-- calculate updates
	if up_num > 0 then
		for i=1,3 do
			if upgrades[i] !=2 then
				upgrades[i]=1
			end
		end
		for i=4,9 do
			if upgrades[i-3]==2 and
					upgrades[i]<2 then
				upgrades[i]=1
			end
		end
	else
		for i=1,9 do
			if upgrades[i]==1 then
				upgrades[i]=0
			end
		end
	end
end

--game
function game_init()
	pp.hp=pp.max_hp
	pp.dam=0
	pp.lzr=0
	// start comment for test
	cam.x=rand(0,xmx)
	cam.y=rand(0,ymx)
	pp.x=rand(cam.x+20,
		(cam.x+128)-20)
	pp.y=rand(cam.y+20,
		(cam.y+128)-20)
	// end comment for test
	create_buildings()
end

function create_buildings()
	for j=0,63 do for i=0,127 do
		local t=mget(i,j)
		if t==64 or t==66 or t==68 or
			t==70 or t==72 or t==74 then
			local b={
				x=i*8,
				y=j*8,
				s=t,
				hp=10
			}
			add(bldngs,b)
		end
	end end
end

function game_update()
	-- get button press
	pp.mov={0,0}
	local press_lzr=f
	if btn(2)then
		pp.rot[2]=f
		pp.mov[2]=-1
	end
	if btn(3)then
		pp.rot[2]=t
		pp.mov[2]=1
	end
	if btn(0)then
		pp.rot[1]=t
		pp.mov[1]=-1
	end
	if btn(1)then
		pp.rot[1]=f
		pp.mov[1]=1
	end
	
	if (btn(5))press_lzr=t
	
	--move player
	local cx=pp.x+pp.mov[1]+(pp.mov[1]*4)
	local cy=pp.y+pp.mov[2]+(pp.mov[2]*4)	
	if can_move(cx,pp.y) then
		pp.x+=pp.mov[1]
	end
	if can_move(pp.x,cy) then
		pp.y+=pp.mov[2]
	end
	--rotate player
	if pp.mov[1] != 0 or
				pp.mov[2] != 0 then
		pp.drr=pp.mov
		if pp.mov[1] ==0 and 
					pp.mov[2] !=0 then
			pp.sp=1
		elseif pp.mov[1] !=0 and 
									pp.mov[2] ==0 then
			pp.sp=2
		else
			pp.sp=3
		end
	end
	
	--player damage
	if pp.dam>0 then
		pp.dam-=0.5
	end
	
	if pp.lzr > 0 then
		pp.lzr-=1
	elseif press_lzr then
		pp.lzr=5
		shoot(pp.x,pp.y,pp.drr)
	end
	
	--enemy spawn
	e_spawn_t-=1
	if e_spawn_t==0 then
		e_spawn_t=e_spawn_t_max
		spawn_enemy()
	end

	move_cam()
	update_lzrs()
	update_enemies()
	update_explosions()
	update_sky_lines()
end

function can_move(x,y)
	local mv=t
	for b in all(bldngs) do
		if inside_b(x,y,b)then
			mv=f
			break
		end
	end
	return mv
end

function damage_player()
	if pp.dam == 0 then
		pp.dam=50
		pp.hp-=1
	end
	if(pp.hp==0)restart()
end

function inside_obj(x,y,o)
	// maybe need to pass in
	// collision box?
	return (x>o.x-4 and 
		x<o.x+4 and y>o.y-4 and 
		y<o.y+4)
end

function shoot(x,y,drr,e)
	local l={
	x1=x,
	y1=y,
	x2=x,
	y2=y,
	tim=5
	}
	local draw=t
	while draw do
		--[[
		this is very slow, need to
		structure stuff better so
		we only search items on
		screen
		]]--
		l.x2+=drr[1]*4
		l.y2+=drr[2]*4
		--check edges
		if(l.x2<cam.x)draw=f
		if(l.x2>cam.x+128)draw=f
		if(l.y2<cam.y)draw=f
		if(l.y2>cam.y+128)draw=f
		--find buildings
		for b in all(bldngs) do
			if inside_b(l.x2,l.y2,b)then
				draw=f
				damage_building(b)
				create_explosion(l.x2,l.y2,t)
				shake_l()
				break
			end
		end
		if e==t then
			if inside_obj(
				l.x2,l.y2,pp) then
				draw=f
				create_explosion(l.x2,l.y2,t)
				shake_l()
				damage_player()
			end
		else
			for e in all(enemies) do
				if e.spawn_t<=0 then
					if inside_obj(l.x2,l.y2,e) then
						draw=f
						damage_enemy(e)
						create_explosion(l.x2,l.y2,t)
						shake_l()
						break
					end
				end
			end
		end
	end
	add(lzrs,l)
end

function update_lzrs()
	for l in all(lzrs) do
		l.tim-=1
		if(l.tim==0)del(lzrs,l)
	end
end

-- buildings
function damage_building(b)
	local bi=flr(b.x/8)
	local bj=flr(b.y/8)
	b.hp-=1
	if b.hp==0 then
		mset(bi,bj,9)
		mset(bi+1,bj,9)
		mset(bi,bj+1,9)
		mset(bi+1,bj+1,9)
		del(bldngs,b)
	elseif b.hp<3 then
		mset(bi,bj,b.s+32)
	elseif b.hp<5 then
		mset(bi+1,bj+1,b.s+49)
	elseif b.hp<8 then
		mset(bi,bj+1,b.s+48)
	elseif b.hp<10 then
		mset(bi+1,bj,b.s+33)
	end
end

function inside_b(x,y,b)
	// maybe need to pass in
	// collision box?
	return (b.x<x and b.x+16>x and
		b.y<y and b.y+16>y)
end

--explosions
function create_explosion(x,y,make_d)
	local delay=0
	if(make_d)delay=rand(0,10)
	local e_out={
		x=rand(x-10,x+10),
		y=rand(y-10,y+10),
		tim=10,
		r=5,
		c=rand(8,10),
		d=delay
	}
	local e_in={
		x=rand(x-10,x+10),
		y=rand(y-10,y+10),
		tim=10,
		r=2,
		c=bk_col,
		d=delay
	}
	add(xplsns,e_out)
	add(xplsns,e_in)
end

function update_explosions()
	for e in all(xplsns) do
		if e.tim==0 then
			del(xplsns,e)
		elseif e.d > 0 then
			e.d-=1
		else
			e.tim-=1
			e.r+=1
		end
	end
end

--sky line
function create_sky_line(x,y)
	local s={
		x=x,
		y=y,
		sp=16
	}
	add(sky_lns,s)
end

function update_sky_lines()
	for s in all(sky_lns) do
		s.sp+=0.3
		if s.sp >= 22 then
			del(sky_lns,s)
		end
	end
end

--enemies
function spawn_enemy()
	local e={
		x=rand(cam.x-5,cam.x+133),
		y=rand(cam.y-5,cam.y+128),
		spawn_t=32,
		tim=0,
		hp=4,
		sp=32,
		rot={f,f},
		mov={0,0},
	}
	add(enemies,e)
end

function update_enemies()
	for e in all(enemies) do
		-- spawn stuff
		if e.spawn_t>0 then
			e.spawn_t-=0.5
			if e.spawn_t==0 then
				create_sky_line(e.x,e.y)
				for _=0,rand(1,3)do
					create_explosion(e.x,e.y,t)
				end
				for b in all(bldngs) do
					if inside_b(e.x,e.y,b) then
						damage_building(b)
						break
					end
				end
			end
		-- move and shoot
		elseif e.tim>0 then
			e.tim-=1
			local cx=e.x+e.mov[1]+(e.mov[1]*4)
			local cy=e.y+e.mov[2]+(e.mov[2]*4)	
			if can_move(cx,e.y) then
				e.x+=e.mov[1]/2
			end
			if can_move(e.x,cy) then
				e.y+=e.mov[2]/2
			end
			if(chance(1))shoot(e.x,e.y,e.mov,t)
			-- delete if off screen
			if(e.x<cam.x-5)del(enemies,e)		
			if(e.x>cam.x+133)del(enemies,e)
			if(e.y<cam.y-5)del(enemies,e)
			if(e.y>cam.y+133)del(enemies,e)		
		-- reset 
		else
			e.tim=rand(10,100)
			e.mov={0,0}
			if chance(20) then
				--move random
				e.mov[1]=rand(-1,1)
				e.mov[2]=rand(-1,1)
				if e.mov[1]==0 and
						e.mov[2]==0 then
					e.mov[1]=1
				end
			else
				--move towards player
				if(pp.x<e.x-5)e.mov[1]=-1
				if(pp.x>e.x+5)e.mov[1]=1
				if(pp.y<e.y-5)e.mov[2]=-1
				if(pp.y>e.y+5)e.mov[2]=1
			end
			--turn
			if(e.mov[1]==1)e.rot[1]=f
			if(e.mov[1]==-1)e.rot[1]=t
			if(e.mov[2]==1)e.rot[2]=t
			if(e.mov[2]==-1)e.rot[2]=f
			--set sprite
			if e.mov[1] ==0 and 
						e.mov[2] !=0 then
				e.sp=4
			elseif e.mov[1] !=0 and 
										e.mov[2] ==0 then
				e.sp=5
			else
				e.sp=6
			end
		end
	end
end

function damage_enemy(e)
	e.hp-=1
	if e.hp==0 then
		ei=flr(e.x/8)
		ej=flr(e.y/8)
		mset(ei,ej,25)
		del(enemies,e)
		pp.xp+=5
	end
end

--cam
function move_cam()
	if(cam.shake>0)return
	cam.tm-=1
	if cam.tm>0 then
		cam.x+=cam.xdir*0.2     
		cam.y+=cam.ydir*0.2
		if cam.x<=xmn then
			cam.x=xmn
			cam.xdir*=-1
		elseif cam.x>=xmx then
			cam.x=xmx
			cam.xdir*=-1
		end
		if cam.y<=ymn then
			cam.y=ymn
			cam.ydir*=-1
		elseif cam.y>=ymx then
			cam.y=ymx
			cam.ydir*=-1
		end
	end
	if cam.tm <= -100 then
		cam.tm=rand(500,1000)
		cam.xdir=rand(-1,1)
		cam.ydir=rand(-1,1)
		if cam.xdir==0 and
				cam.ydir==0 then
			cam.tm=50
		end
		printh("--cam")
		printh(cam.xdir)
		printh(cam.ydir)
		printh(cam.x)
		printh(cam.y)
	end
end

--short shake
function shake_s()
	cam.shake=8
end

--long shake
function shake_l()
	cam.shake=16
end

--shake
function shake()
	if not will_shake then
		cam.shake=0
		return
	end
	if cam.shake>0 then
		if cam.shake%2==0 then
			cam.x+=cam.samt*2
			cam.samt*=-1
		end
		cam.shake-=1
	end
end
__gfx__
0000000001100110011111100001100000100100011110000000110000000000000000000000000060000000003000b0009000a00080009000d000c0002000e0
00000000177117711dd7777100177100017117101557711000117100000ff0000000000000005600000500600300000009000000080000000d00000002000000
00700700177117711dcc677101771110017117101586777101771111000ff0000ff00ff0000566600500050000000300000009000000080000000d0000000200
00077000176cc6711dccc110176cc1711778877118888110156881710000f00000000000056000000006000600b0300b00a0900a0090800900c0d00c00e0200e
0007700017cccc711dccc1101dccc771176886711888811018888710000000000ff00ff056605600060000000000000000000000000000000000000000000000
007007001dccccd11dcc67711dcc6710158888511586777115886710000ff00000f000f066556600000600500300b0000900a000080090000d00c0000200e000
000000001dddddd11dd7777111dd7100155885511557711015585100000ff000000000000056666005006000300000309000009080000080d00000d020000020
000000000111111001111110011110000111111001111000011110000000f00000000000000000000000005000b0030000a009000090080000c00d0000e00200
8888888888888080888809008898a00089a00000a0000000000000000000000000000000000000000000000000300000009000000080000000d0000000200000
8888888888888080888809008898a00089a00000a000000000000000000000000000000000000000050005000300000009000000080000000d00000002000000
8888888888888080888809008898a00089a00000a0000000000000000000000000000000000055800000000000000300000009000000080000000d0000000200
8888888888888080888809008898a00089a00000a000000000000000000000000000000000056660005050000000300000009000000080000000d00000002000
8888888888888080888809008898a00089a00000a000000000000000000000000000000080000000000000500000000000000000000000000000000000000000
8888888888888080888809008898a00089a00000a000000000000000000000000000000000580000050000000300000009000000080000000d00000002000000
8888888888888080888809008898a00089a00000a00000000000000000000000000000000566005000000500300000309000009080000080d00000d020000020
8888888888888080888809008898a00089a00000a0000000000000000000000000000000000005600000000000000300000009000000080000000d0000000200
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001331000019910000188100001dd10000122100
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011110000111100001111000011110000111100
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000111100001111000011110000111100001111000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000001bbbb1001aaaa100199991001cccc1001eeee100100000001000000010000000100000001000000
000000000000000000000000000000000000000000000000133bbbb1199aaaa1188999911ddcccc1122eeee11310010119100101181001011d10010112100101
0000000000000000000000000000000000000000000000001bbbbbb11aaaaaa1199999911cccccc11eeeeee11331131119911911188118111dd11d1112211211
00000000000000000000000000000000000000000000000013bbbbb119aaaaa1189999911dccccc112eeeee113bb1b3119aa1a91189919811dcc1cd112ee1e21
0000000000000000000000000000000000000000000000001bbbbbb11aaaaaa1199999911cccccc11eeeeee11bbbbb111aaaaa11199999111ccccc111eeeee11
000000000000000000000000000000000000000000000000133bbbb1199aaaa1188999911ddcccc1122eeee11333310019999100188881001dddd10012222100
00000000000000000000000000000000000000000000000001111110011111100111111001111110011111100111111001111110011111100111111001111110
00000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000155555555555555100000000000000000000000000000000
00000111111000000000011111100000000001111110000000000111111000000000011111100000155555566666666100000000000000000000000000000000
00011333bbb1100000011999aaa11000000118889991100000011dddccc1100000011222eee11000155555666666666100000000000000000000000000000000
0013333bbbbbb1000019999aaaaaa1000018888999999100001ddddcccccc1000012222eeeeee100155556666666666100000000000000000000000000000000
013333bbbbbbbb10019999aaaaaaaa10018888999999991001ddddcccccccc10012222eeeeeeee10155566666666666100000000000000000000000000000000
01333bbbbbbbbb1001999aaaaaaaaa10018889999999991001dddccccccccc1001222eeeeeeeee10155666666666666100000000000000000000000000000000
01333bbbbbbbbb1001999aaaaaaaaa10018889999999991001dddccccccccc1001222eeeeeeeee10156666666666666100000000000000000000000000000000
013311111111bb10019911111111aa10018811111111991001dd11111111cc10012211111111ee10111111111111111100000000000000000000000000000000
011111333311111001111199991111100111118888111110011111dddd1111100111112222111110155555555555555100000000000000000000000000000000
011133bbbbbb1110011199aaaaaa111001118899999911100111ddcccccc1110011122eeeeee1110155566666666666100000000000000000000000000000000
0133bbbbbbbbbb100199aaaaaaaaaa10018899999999991001ddcccccccccc100122eeeeeeeeee10155565666656556100000000000000000000000000000000
013333bbbb33bb10019999aaaa99aa10018888999988991001ddddccccddcc10012222eeee22ee10155666666666666100000000000000000000000000000000
013333b33b33bb10019999a99a99aa10018888988988991001ddddcddcddcc10012222e22e22ee10155565655656556100000000000000000000000000000000
0013bbb33bbbb1000019aaa99aaaa1000018999889999100001dcccddcccc1000012eee22eeee100156666655666666100000000000000000000000000000000
00011111111110000001111111111000000111111111100000011111111110000001111111111000011111111111111000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111110000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000001555555100000000000000000000000000000000000
00000011110000000000001111000000000000111100000000000011110000000000001111000000000015566666100000000000000000000000000000000000
00011013b100000000011019a100000000011018910000000001101dc100000000011012e1000000001015666661001100000000000000000000000000000000
0013101bb10000000019101aa10000000018101991000000001d101cc10000000012101ee1000000101015666661111100000000000000000000000000000000
013311bbb3110000019911aaa9110000018811999811000001dd11cccd110000012211eee2110000115155666611515100000000000000000000000000000000
013311bbbb331110019911aaaa991110018811999988111001dd11ccccdd1110012211eeee221110115556666655656100000000000000000000000000000000
01333bbbbbbbb11001999aaaaaaaa110018889999999911001dddcccccccc11001222eeeeeeee110155566666666666100000000000000000000000000000000
013311111111bb10019911111111aa10018811111111991001dd11111111cc10012211111111ee10111111111111111100000000000000000000000000000000
011111333311111001111199991111100111118888111110011111dddd1111100111112222111110155555555555555100000000000000000000000000000000
011133bbbbbb1110011199aaaaaa111001118899999911100111ddcccccc1110011122eeeeee1110155566666666666100000000000000000000000000000000
0133bbbbbbbbbb100199aaaaaaaaaa10018899999999991001ddcccccccccc100122eeeeeeeeee10155565666656156100000000000000000000000000000000
013331bbb133b110019991aaa199a110018881999188911001ddd1ccc1ddc110012221eee122e110155161166665116100000000000000000000000000000000
013111b310131110019111a910191110018111981018111001d111cd101d1110012111e210121110151010155655101100000000000000000000000000000000
00110113101b110000110119101a110000110118101911000011011d101c110000110112101e1100111000015551001100000000000000000000000000000000
00000111100110000000011110011000000001111001100000000111100110000000011110011000011000011111000000000000000000000000000000000000
__map__
40410000404100000740411b360700000b0b0b0b404100000b1b004041001a00004a4b0a0000001f1f1f1f1f0f0f1f48490048491f3a1f0f1f001e1e46471e1e1e4647391e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
50510000505100000750511b2b0700000b360b0b50510036001b0b50511b1b001a5a5b0a0000001f1f3a1f0f0f0f1f58590058591f2f0f0f1f1f001e56571e0e1e56572e1e1e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000071b1b1b000000000b2b000b0000002b1b1b001b001a4a4b1a0a0a0a004a4b1f0a2f0f3a0f0f1f1f0000001f0f0f0f0f1f46471e1e1e1e0e0e0e001e1e1e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000001b1b0036071b1b1b360000000040410b0b40411b1b4041001a1b5a5b000a0000005a5b000a1f0f2f0f1f1f48490048491f0f1f0f1f5657001e1e390e0e0e0e0e0e1e1e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4041001b4041002b071b1b1b2b07000000505100005051000b5051000a0a0a0a0a0a0a0a0a0a0a0a0a1f0f0f0f0f0058590058590046471e1f000046471e2e46470e0e46471e1e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5051000050511b0008080808080800000000000036001b1b1b00001a0a000000000000000a00001a1a1a1f1f1f000808080808080856571e001e1e5657000e56570e0e56571e1e390000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001b1b36001b1b1b0000000000000000000000002b1b1b361b000b0b1a004a4b004a4b000a00001a4a4b1a0f00070e0e0e0e0e0e0e1e1e1e1e391e1e000e0e0e0e0e0e1e1e1e1e2e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000360b0b1b0b1b1b40410000404100004041001b40412b1b4041000b005a5b005a5b000a001a1a5a5b1a00000746470e46470e0e0e0e0e1e2e1e46471e1e0e0e0e0e1e1e1e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
42432b0b0b0b0b0b1b50510000505100005051001b50510b1b50510a0a0a0a0a0a0a0a0a0a001a1a1a1a1a1a000756570e56570e0e0e0e1e1e1e005657001e1e1e46471e1e1e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
52531b0b0b0b0b1b1b00000000000000000000001b1b1b0b1b00000036004a4b00004a4b0a004a4b001a1a1a39070e0e0e0e0e0e0e46471e1e1e1e001e1e1e1e1e56571e390000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1c1c1c1b0b0b1b1b360000003700000000370036001b1b0b0b0b00002b005a5b00005a5b0a005a5b000000002e000808080808080856571e1e1e1e00004243001e1e1e1e2e000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1c1c1b1b1b0b1b362b0037002c080808082c002b1b0b0b0b0b0b1b1b00001a1a00001a1a0a001a1a00000000001f1f1f1f0f0f0f000000001e1e1e00005253000000000000000c000000000000000000000000000000000000004a4b00004a4b00004a4b00004a4b000000000000000000000000000000000000000000000000
08080808081b002b001c2c1c071c1c001c0700001b0b0b0b360b1b0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a001f1f0f0f0f1f1f1f000000001e00000000000000424300000c000000000000000000000000000000000000005a5b00005a5b00005a5b00005a5b00001a000000000000000000000000000000000000000000
1c42430c074243001c42431c07424337000700001b1b1b0b2b1b1b00000000004a4b0a004a4b00004a4b00000048491f0f0f1f1f1f1f1f0048490007080808080808525308080c080808000000000000000000000000000000001a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a000000000000000000000000000000000000000000
0052530c0752531c1c52531c0752532c3707000000001b1b1b44450d0d0038005a5b0a005a5b00005a5b00000058591f0f0f1f1f48491f0058590f071c0037001c000c0c0c0c0c001c07000000000000000000000000000000000000000000000a0a000000000000000000000040410000000000000000000000000000000000
0c000c0c070000000c1c1c1c070000002c07001e1e1e00381d5455000d002d001a1a0a001a1a00001a1a0000001f1f1f1f001f1f58591f00000f0f4243002c4243000c42430037424307000000000000000000000000000000004a4b00004a4b0a0a4a4b00004a4b0000000000505100001b1b1b1b1b00000000000000000000
080808080737001c0c1c1c1c000000080800001e1e1e1e2d1d0d0d000a0a0a0a0a0a0a0a0a0a0a0a0a0a0000003a1f1f48491f3a1f1f1f000f0f0f525300005253000c52531c2c5253070000000000000000000000001a1a00005a5b00005a5b0a0a5a5b00005a5b0000000000000000001b1b1b1b1b1b1b1b1b000000000000
00001c00002c000c0c1c0c1c1c000000000000001e1e1e001d1d44451d0000004a4b00004a4b000a4a4b0000002f1f1f5859002f0000000000000f070c0c0c0c0c0c0c0c0c0c0c0c0c00000000000000000000000000001a1a1a1a1a1a1a1a1a0a0a1a1a1a1a1a1a1a1a1a1a1a1a0000001b40410b361b1b1b00000000000000
42430042431c42430c0c0c0000004647000046471e004647001d54551d0d1d005a5b00005a5b000a5a5b00003a000000000f004849003a001f000007001c00371c00370c1c4243000007000000000000000000000000000000004a4b000037001e1e003700004a4b0000000808080808080050510b2b0b0b1b1b000000000000
52531c525300525342430000000856570008565700085657001d1d001d1d1d001a1a00001a1a000a1a1a00002f48491f000f005859002f001f1f1f4243001c2c42432c0c1c5253001c071c0000000000000000000000000000005a5b00002c1e0e0e1e2c00005a5b0000074041004041360700000b0b0b0b0b1b1b1b1d1d0d00
1c370000000000005253000000000e0e0e0e0e0e0e0e0e0e001d1d1d4445380a0a0a0a0a0a0a0a0a0a0a00000058591f0f3a0f0000000048491f0052530000005253000c0c0c0c0042431c1c1c000000000000000000000000000a0a0a0a1e0e0e0e0e1e0a0a0a0a00000750513650512b070b0b0b4041000b1b1b1b1d0d0d0d
002c4445001c000000000000000000000e0000000000001e1e1e1e1d54552d0000000a00000000000000000000001f0f0f2f0f0f0f0f0f5859001f0c0c0c0c0c0c0c0c0c0c08080852530c0c1c000000000000000000000000000a0a0a0a1e0e0e0e0e1e0a0a0a0a00000700002b000000071b0b005051000b361b1b1d0d0d0d
080854550808080808080808080000000e4647004647001e1e1e1e1d0d0d0d1d1d000a00000000000039000000001f1f0f0f0f1f1f0b0b001b1b000808080808081c370000001c1c0c0c0c0c1c1c0000000000000000000000004a4b0000371e0e0e1e3700004a4b00000008080808080840410b0b00000b0b2b00000d0d0d00
1d1d1d0d0d44450d0d1d380d070039000e565708565708001e1e000d0d1d1d4445000a0000390000002e000039001f0f1f0b0f0f1f1f360b1f1f1f0000001c1c1c1c2c4243001c1c0c0c0c0c1c000000000000000000000000005a5b00002c001e1e002c00005a5b00000000001b1b1b1b5051360b0b0b0b1b1b001d1d0d1d0d
44451d0d0d54550d1d1d2d0d07002e000e0e0e0e0e0e0000001d1d44451d1d5455000000002e0000000046472e00000f0b0b1b1b1b1f2b1b0b1b1f00001c1c1c1c1c37525300001c1c1c1c1c1c000000000000000000001a1a1a1a1a1a1a1a1a0a0a1a1a1a1a1a1a004a4b001b1b40410b0b0b2b1b40411b0000360044451d1d
54551d1d1d1d001d384445000700464700000e00464700000d0d0d54551d0d0d0000080846470808080856570807000f1f1b40411b1f4041001f40413600000000002c0000000000001c1c1c00000000000000000000000000004a4b00004a4b0a0a4a4b00004a4b005a5b001b1b50510b000b0b1b505100001b2b0d54551d1d
00201d44451d1d1d2d5455000700565708000e005657080000390d1d0d0d0d391e0007005657004647000000000700001b005051001f50511b1f50512b00370037003700000000000000000000000000000000000000000000005a5b00005a5b0a0a5a5b00005a5b1a1a1a1a1a1b1b1b0b0b0b0b00001b1b00000d0d001d1d00
0d0d0d5455000d0d1d1d000007000e0e0e0e0e0e0e0e0000002e1d0d0d00002e001e071e1e000056571e004647071b1b361b1b1b1b1b1b001b1b1b1b00002c002c002c000000000000000000000000000000000000001a1a1a1a1a1a1a1a1a1a0a0a1a1a1a1a1a1a1a4a4b0044451b1b1b1b1b1b1b00001b001b084445084445
0038001d1d0d1d1d0d1d1d00000000001e1e1e1e0000000039001d00003800003900001e1e0000001e1e005657071b1b2b1b40411b0040411b40411b1b1b00000000000000000000000000000000000000000000000000000000004a4b0000000000000000000000005a5b385455001b1b1b001d1b1b1d000d000754550d5455
002d001d000038001d0d1d1d070000001e1e1e001e0039002e1d3800002d001e2e000000464700000000001e1e07001b1b1b5051360b50510b50511b1b1b00000000000000000000000000000000000000000000000000000000005a5b004a4b0000004a4b004a4b001a1a2c1d001d1d00381d0038004445001d070d0d0d0d0d
1d0d1d4445000d0d1d0d0d1d07003900001e0039001e2e001d381d001e1e391e1e00070056571e004647001e1e070040410000002b0b000b0b00001b1b1b00000000000000000000000000000000000000000000000000001a1a1a1a1a005a5b0000005a5b005a5b001a1a1a1a384445002c44452c0054551d0d44450d0d4445
08080854550808080808080807002e000000002e1e00001e001d001e1e002e001e000808080808085657080808080850510b0b0b0b0b0b0b0b0b0b0b1b1b000000000000000000000000000000000000000000000000000000001a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a381d2c54551d1d54551d00000d0d0d54550d0d5455
